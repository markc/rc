#!/usr/bin/env bash
# Created: 20230702 - Updated: 20251018
# Copyright (C) 1995-2025 Mark Constable <mc@netserva.org> (MIT License)
# SSH Manager - Manages ~/.ssh directory (hosts, keys, config)

# Help function
help() {
    case $1 in
    c | create)
        echo "Create a new SSH Host file in ~/.ssh/hosts/"
        echo "Usage: sshm create <Name> <Host> [Port] [User] [Skey]"
        ;;
    r | read | show)
        echo "Show the content values for a host"
        echo "Usage: sshm read <Name>"
        ;;
    u | update)
        echo "Edit the contents of an SSH Host file"
        echo "Usage: sshm update <Name>"
        ;;
    d | delete)
        echo "Delete an SSH Host config file"
        echo "Usage: sshm delete <Name>"
        ;;
    l | list)
        echo "List all host config files in ~/.ssh/hosts/"
        echo "Usage: sshm list"
        ;;
    kc | key_create)
        echo "Create a new SSH Key in ~/.ssh/keys/"
        echo "Usage: sshm key_create <Name> [Comment] [Password]"
        ;;
    kr | key_read)
        echo "Show SSH Key"
        echo "Usage: sshm key_read <Name>"
        ;;
    ku | key_update)
        echo "Update SSH Key (alias for key_create)"
        echo "Usage: sshm key_update <Name> [Comment] [Password]"
        ;;
    kd | key_delete)
        echo "Delete SSH Key"
        echo "Usage: sshm key_delete <Name>"
        ;;
    kl | key_list)
        echo "List all SSH Keys in ~/.ssh/keys/"
        echo "Usage: sshm key_list"
        ;;
    i | init)
        echo "Initialize ~/.ssh structure (NS 3.0 format)"
        echo "Usage: sshm init"
        ;;
    p | perms)
        echo "Reset permissions for ~/.ssh"
        echo "Usage: sshm perms"
        ;;
    t | test)
        echo "Test SSH connectivity for hosts"
        echo "Usage: sshm test [hostname] [--delete-failed]"
        echo "  Without args: Test all hosts"
        echo "  With hostname: Test specific host only"
        echo "  --delete-failed: Delete failed host configs (not ephemeral)"
        ;;
    *)
        echo "Usage: sshm <cmd> [args]"
        echo "Commands: create, read, update, delete, list, test, key_create, key_read, key_update, key_delete, key_list, init, perms, help"
        ;;
    esac
}

[[ -z $1 || $1 =~ -h ]] && help && exit 1

# SSH Host management functions
create() {
    local name=$1 host=$2 port=${3:-22} user=${4:-root} skey=${5:-none}

    echo "Host $name
    Hostname $host
    Port $port
    User $user" >~/.ssh/hosts/$name

    [[ $skey != "none" ]] && echo "  IdentityFile $skey" >>~/.ssh/hosts/$name || echo "  #IdentityFile none" >>~/.ssh/hosts/$name
}

show() {
    local name=$1
    [[ -f ~/.ssh/hosts/$name ]] && cat ~/.ssh/hosts/$name | awk '{print $2}' || echo "Notice: ~/.ssh/hosts/'$name' does not exist (254)" && exit 254
}

update() {
    local name=$1
    [[ -f ~/.ssh/hosts/$name ]] && nano -t -x -c ~/.ssh/hosts/$name || echo "Notice: ~/.ssh/hosts/'$name' does not exist (254)" && exit 254
}

delete() {
    local name=$1
    if [[ -f ~/.ssh/hosts/$name ]]; then
        rm ~/.ssh/hosts/$name
        echo "Removed: SSH host '$name' (251)" && exit 251
    else
        echo "Error: SSH host '$name' does not exist (255)" && exit 255
    fi
}

list() {
    for file in ~/.ssh/hosts/*; do
        [[ -f "$file" ]] || continue
        awk '
        BEGIN { host=""; hostname=""; port="22"; user="root"; key="" }
        /^Host / { host=$2 }
        /Hostname/ { hostname=$2 }
        /Port/ { port=$2 }
        /User/ { user=$2 }
        /IdentityFile/ { key=$2 }
        END { printf "%-15s %17s %5s %10s %25s\n", host, hostname, port, user, key }
        ' "$file"
    done
}

# SSH Key management functions
key_create() {
    local name=$1 comment=${2:-"$(hostname)@lan"} password=$3

    if [[ -f ~/.ssh/keys/$name ]]; then
        echo "Warning: SSH Key '~/.ssh/keys/$name' already exists" && exit 254
    fi

    ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/keys/$name -C "$comment" -N "$password" || echo "Error: SSH key '$name' not created" && exit 254
}

key_read() {
    local name=$1
    [[ -f ~/.ssh/keys/$name.pub ]] && cat ~/.ssh/keys/$name.pub || echo "Warning: '$name' key does not exist (254)" && exit 254
}

key_delete() {
    local name=$1
    [[ -f ~/.ssh/keys/$name ]] && rm ~/.ssh/keys/$name ~/.ssh/keys/$name.pub && echo "Success: removed ~/.ssh/keys/$name and ~/.ssh/keys/$name.pub" || echo "Error: ~/.ssh/keys/$name does not exist" && exit 255
}

key_list() {
    for key in ~/.ssh/keys/*.pub; do
        [[ -f "$key" ]] || continue
        echo -n "$(basename "$key" .pub) "
        ssh-keygen -lf "$key"
    done
}

# Supplementary functions
copy() {
    local skey=$1 name=$2

    [[ ! -f ~/.ssh/keys/$skey.pub ]] && echo "Error: ~/.ssh/keys/$skey.pub does not exist" && exit 255
    [[ ! -f ~/.ssh/hosts/$name ]] && echo "Error: ~/.ssh/hosts/$name does not exist" && exit 255

    local pubkey=$(cat ~/.ssh/keys/$skey.pub)
    ssh $name "[[ ! -d ~/.ssh ]] && mkdir -p ~/.ssh && chmod 700 ~/.ssh; echo $pubkey >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys;"
    echo "Success: Public key $skey.pub was successfully transferred to $name"
}

perms() {
    find ~/.ssh -type d -exec chmod 700 {} +
    find ~/.ssh -type f -exec chmod 600 {} +
    echo "Updated permissions for ~/.ssh"
}

init() {
    # NetServa 3.0 SSH Directory Structure
    [[ -d ~/.ssh ]] || { mkdir ~/.ssh && chmod 700 ~/.ssh && echo "Created ~/.ssh"; }
    [[ -f ~/.ssh/authorized_keys ]] || { touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys && echo "Created ~/.ssh/authorized_keys"; }
    [[ -d ~/.ssh/hosts ]] || { mkdir ~/.ssh/hosts && chmod 700 ~/.ssh/hosts && echo "Created ~/.ssh/hosts"; }
    [[ -d ~/.ssh/keys ]] || { mkdir ~/.ssh/keys && chmod 700 ~/.ssh/keys && echo "Created ~/.ssh/keys"; }
    [[ -d ~/.ssh/mux ]] || { mkdir ~/.ssh/mux && chmod 700 ~/.ssh/mux && echo "Created ~/.ssh/mux (for ControlMaster sockets)"; }

    [[ -f ~/.ssh/config ]] || {
        echo "# NetServa 3.0 SSH Configuration
# Created by sshm on $(date +'%Y%m%d')

# Security and Performance
Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com

# Include all host configurations from ~/.ssh/hosts/
Include ~/.ssh/hosts/*

# Global defaults for all hosts
Host *
  TCPKeepAlive yes
  ServerAliveInterval 30
  ForwardAgent yes
  AddKeysToAgent yes
  IdentitiesOnly yes
  # ControlMaster for connection multiplexing
  ControlMaster auto
  ControlPath ~/.ssh/mux/%r@%h:%p
  ControlPersist 10m" >~/.ssh/config
    }
    perms

    echo "NetServa 3.0 SSH structure initialized"
}

# SSH connectivity testing
test() {
    local test_host=$1
    local delete_failed=false
    local timeout=5

    # Check for --delete-failed flag in any position
    [[ "$@" =~ --delete-failed ]] && delete_failed=true

    # Colors
    local RED='\033[0;31m'
    local GREEN='\033[0;32m'
    local YELLOW='\033[1;33m'
    local BLUE='\033[0;34m'
    local NC='\033[0m'

    # Counters
    local total=0 success=0 failed=0 special_success=0 ephemeral_offline=0

    # Result arrays
    declare -a failed_hosts failed_files ephemeral_offline_hosts

    # Load special hosts (git providers + ephemeral from file)
    declare -A special_hosts=(["github.com"]="git_provider")
    local ephemeral_file="$HOME/.ssh/hosts/.ephemeral"
    if [[ -f "$ephemeral_file" ]]; then
        while IFS= read -r line; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            special_hosts["$line"]="ephemeral"
        done <"$ephemeral_file"
    fi

    echo "üîç Testing SSH connectivity in ~/.ssh/hosts/"
    echo "‚è±Ô∏è  Timeout: ${timeout} seconds per host"
    [[ "$delete_failed" == true ]] && echo -e "${RED}üóëÔ∏è  WARNING: Failed host files will be automatically deleted!${NC}"
    echo ""

    # Test function for a single host
    test_single_host() {
        local host_file=$1
        local filename=$(basename "$host_file")

        [[ "$filename" == "config" || "$filename" =~ ^\. ]] && return

        ((total++))

        # Parse SSH config
        local host=$(grep -i "^Host" "$host_file" | awk '{print $2}' | head -1)
        local hostname=$(grep -i "^\s*Hostname" "$host_file" | awk '{print $2}' | head -1)
        host=${host:-$filename}

        [[ -z "$host" ]] && return

        # Build display info
        local display_info="$host"
        [[ -n "$hostname" ]] && display_info="$host ($hostname)"

        printf "Testing %-40s ... " "$display_info"

        # Check if special host
        if [[ -n "${special_hosts[$host]}" ]]; then
            local host_type="${special_hosts[$host]}"
            local ssh_output=$(ssh -o BatchMode=yes \
                -o ConnectTimeout="$timeout" \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                "$host" 2>&1 || true)

            if [[ "$ssh_output" =~ "successfully authenticated" ]] ||
                [[ "$ssh_output" =~ "Hi" ]] ||
                [[ "$ssh_output" =~ "Permission denied (publickey)" ]]; then
                echo -e "${BLUE}‚úÖ OK ($host_type)${NC}"
                ((success++))
                ((special_success++))
            else
                if [[ "$host_type" == "ephemeral" ]]; then
                    echo -e "${YELLOW}‚è∏Ô∏è  OFFLINE ($host_type)${NC}"
                    ephemeral_offline_hosts+=("$([ -n "$hostname" ] && echo "$filename ($hostname)" || echo "$filename")")
                    ((ephemeral_offline++))
                else
                    echo -e "${RED}‚ùå FAILED${NC}"
                    failed_hosts+=("$([ -n "$hostname" ] && echo "$filename ($hostname)" || echo "$filename")")
                    failed_files+=("$host_file")
                    ((failed++))
                fi
            fi
        else
            # Standard test
            if ssh -o BatchMode=yes \
                -o ConnectTimeout="$timeout" \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                -o LogLevel=ERROR \
                "$host" "true" 2>/dev/null; then
                echo -e "${GREEN}‚úÖ OK${NC}"
                ((success++))
            else
                echo -e "${RED}‚ùå FAILED${NC}"
                failed_hosts+=("$([ -n "$hostname" ] && echo "$filename ($hostname)" || echo "$filename")")
                failed_files+=("$host_file")
                ((failed++))
            fi
        fi
    }

    # Test hosts
    if [[ -n "$test_host" && "$test_host" != "--delete-failed" ]]; then
        # Test single host
        local host_file="$HOME/.ssh/hosts/$test_host"
        if [[ -f "$host_file" ]]; then
            test_single_host "$host_file"
        else
            echo -e "${RED}‚ùå Error: Host '$test_host' not found in ~/.ssh/hosts/${NC}"
            return 1
        fi
    else
        # Test all hosts
        for host_file in ~/.ssh/hosts/*; do
            [[ -f "$host_file" ]] && test_single_host "$host_file"
        done
    fi

    # Summary (only if testing all hosts)
    if [[ -z "$test_host" || "$test_host" == "--delete-failed" ]]; then
        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìä Summary"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "   Total hosts:    $total"
        echo -e "   ${GREEN}Successful:     $success${NC}"
        [[ $special_success -gt 0 ]] && echo -e "   ${BLUE}  ‚îú‚îÄ Special:     $special_success${NC}"
        [[ $ephemeral_offline -gt 0 ]] && echo -e "   ${YELLOW}Offline:        $ephemeral_offline (ephemeral)${NC}"
        echo -e "   ${RED}Failed:         $failed${NC}"
        echo ""

        # Show results
        [[ $failed -gt 0 ]] && {
            echo -e "${RED}‚ùå Failed Hosts:${NC}"
            for host in "${failed_hosts[@]}"; do echo "   - $host"; done
            echo ""
        }

        [[ $ephemeral_offline -gt 0 ]] && {
            echo -e "${YELLOW}‚è∏Ô∏è  Offline Ephemeral Hosts:${NC}"
            for host in "${ephemeral_offline_hosts[@]}"; do echo "   - $host"; done
            echo ""
        }

        # Delete failed if requested
        if [[ "$delete_failed" == true && $failed -gt 0 ]]; then
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo -e "${RED}üóëÔ∏è  Deleting Failed Host Files${NC}"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            for file in "${failed_files[@]}"; do
                local fn=$(basename "$file")
                rm -f "$file" && echo -e "   ${RED}‚úó${NC} Deleted: $fn" || echo -e "   ${YELLOW}‚ö†Ô∏è${NC} Failed to delete: $fn"
            done
            echo ""
            echo -e "${GREEN}‚úÖ Deleted $failed failed host configuration files${NC}"
            echo ""
        fi

        # Exit code
        [[ $failed -gt 0 && "$delete_failed" != true ]] && return 1
    fi

    return 0
}

# Systemctl control functions
start() {
    sudo systemctl start sshd
    sudo systemctl enable sshd
}

stop() {
    sudo systemctl stop sshd
    sudo systemctl disable sshd
}

# Command handler
case $1 in
c | create) create $2 $3 $4 $5 $6 ;;
r | read | show) show $2 ;;
u | update) update $2 ;;
d | delete) delete $2 ;;
l | list) list ;;
t | test) test $2 $3 ;;
kc | key_create) key_create $2 $3 $4 ;;
kr | key_read) key_read $2 ;;
ku | key_update) key_create $2 $3 $4 ;;
kd | key_delete) key_delete $2 ;;
kl | key_list) key_list ;;
i | init) init ;;
p | perms) perms ;;
start) start ;;
stop) stop ;;
h | help) help $2 ;;
*) echo "Unknown command '$1'" && help ;;
esac

exit 0
