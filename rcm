#!/usr/bin/env bash
# Created: 20250930 - Updated: 20250930
# Copyright (C) 1995-2025 Mark Constable <markc@renta.net> (AGPL-3.0)
# RC Manager - Manages ~/.rc runtime configuration directory

# Help function
help() {
    case $1 in
    i | init)
        echo "Initialize shell configuration"
        echo "Usage: rcm init"
        echo "  - Creates ~/.myrc from template if missing"
        echo "  - Adds sourcing line to ~/.bashrc if not present"
        ;;
    s | sync)
        echo "Sync ~/.rc directory to remote host"
        echo "Usage: rcm sync <ssh_host>"
        echo "Example: rcm sync myserver"
        echo "Note: ~/.myrc is not synced (machine-local only)"
        ;;
    *)
        echo "Usage: rcm <cmd> [args]"
        echo "Commands: init, sync, help"
        echo ""
        echo "For SSH management use: sshm"
        ;;
    esac
}

[[ -z $1 || $1 =~ -h ]] && help && exit 1

# Initialize RC structure
init() {
    # Create user customization file from template if missing
    if [[ ! -f ~/.myrc ]]; then
        if [[ -f ~/.rc/_myrc.example ]]; then
            cp ~/.rc/_myrc.example ~/.myrc
            # Add header explaining purpose
            sed -i '1i# Personal configuration - machine-local, never synced or versioned\n# Sourced by ~/.rc/_shrc after base environment is set up\n' ~/.myrc
            echo "‚úÖ Created ~/.myrc from template"
            echo "‚ÑπÔ∏è  Edit ~/.myrc to add your personal customizations"
        else
            # Fallback if template doesn't exist
            cat >~/.myrc <<'MYRC'
# Personal configuration - machine-local, never synced or versioned
# Sourced by ~/.rc/_shrc after base environment is set up
#
# Use this file for:
# - Personal API tokens and credentials
# - Machine-specific aliases and preferences
# - Color/label customization
# - PATH extensions: export PATH=$HOME/bin:$PATH

# Examples:
# export LABEL=$(hostname)
# export COLOR=32
# alias myproject='cd ~/projects/myproject'

MYRC
            echo "‚úÖ Created ~/.myrc for personal customizations"
        fi
    else
        echo "‚ÑπÔ∏è  ~/.myrc already exists"
    fi

    # Add sourcing line to ~/.bashrc if not already present
    local bashrc="$HOME/.bashrc"
    local source_line='[ -f ~/.rc/_shrc ] && . ~/.rc/_shrc'

    if [[ -f "$bashrc" ]]; then
        if ! grep -qF "$source_line" "$bashrc"; then
            echo "" >>"$bashrc"
            echo "# Source RC shell enhancements" >>"$bashrc"
            echo "$source_line" >>"$bashrc"
            echo "‚úÖ Added sourcing line to ~/.bashrc"
            echo "‚ÑπÔ∏è  Run: source ~/.bashrc (or restart shell)"
        else
            echo "‚ÑπÔ∏è  ~/.bashrc already sources ~/.rc/_shrc"
        fi
    else
        echo "‚ö†Ô∏è  ~/.bashrc not found, please add manually:"
        echo "   $source_line"
    fi

    echo "‚úÖ RC structure initialized"
}

# Sync ~/.rc directory to remote host
sync() {
    local ssh_host="$1"

    if [[ -z "$ssh_host" ]]; then
        echo "‚ùå Error: SSH host required"
        echo "Usage: rcm sync <ssh_host>"
        exit 1
    fi

    # Check if SSH host exists in config
    if ! grep -q "^Host $ssh_host$" ~/.ssh/hosts/* 2>/dev/null; then
        echo "‚ö†Ô∏è  Warning: SSH host '$ssh_host' not found in ~/.ssh/hosts/"
        echo "Attempting connection anyway..."
    fi

    echo "üîÑ Syncing ~/.rc/ to $ssh_host:~/.rc/..."
    rsync -avz --exclude='.git' ~/.rc/ "$ssh_host":~/.rc/

    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Sync completed successfully"
        echo "‚ÑπÔ∏è  Note: ~/.myrc is machine-local and was not synced"
        echo "   Run: ssh $ssh_host \"~/.rc/rcm init\""
        echo "   to create remote's own ~/.myrc if needed"
    else
        echo "‚ùå Sync failed"
        exit 1
    fi
}

# Command handler
case $1 in
i | init) init ;;
s | sync) sync $2 ;;
h | help) help $2 ;;
*) echo "Unknown command '$1'" && help ;;
esac

exit 0
